define(["require","exports"],(function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.twoslashCompletions=t.parsePrimitive=t.extractTwoSlashCompilerOptions=void 0;const o=/^\/\/\s?@(\w+)$/,s=/^\/\/\s?@(\w+):\s?(.+)$/;function n(e,t,o,s){const n=s.get(e.toLowerCase());if(n){switch(n.type){case"number":case"string":case"boolean":o[n.name]=r(t,n.type);break;case"list":const e=n.element.type,s=t.split(",");o[n.name]="string"==typeof e?s.map((t=>r(t,e))):s.map((t=>i(n.name,t,e))).filter(Boolean);break;default:const a=n.type;o[n.name]=i(n.name,t,a)}if(void 0===o[n.name]){const e=Array.from(n.type.keys());console.log(`Invalid value ${t} for ${n.name}. Allowed values: ${e.join(",")}`)}}}function r(e,t){switch(t){case"number":return+e;case"string":return e;case"boolean":return"true"===e.toLowerCase()||0===e.length}console.log(`Unknown primitive type ${t} with - ${e}`)}function i(e,t,o){const s=o.get(t.toLowerCase());if(void 0===s){const s=Array.from(o.keys());console.error("Invalid inline compiler value",`Got ${t} for ${e} but it is not a supported value by the TS compiler.`,`Allowed values: ${s.join(",")}`)}return s}t.extractTwoSlashCompilerOptions=e=>{let t=new Map;if("optionDeclarations"in e)for(const o of e.optionDeclarations)t.set(o.name.toLowerCase(),o);else console.error("Could not get compiler options from ts.optionDeclarations - skipping twoslash support.");return e=>{const r=e.split("\n"),i={};return r.forEach((e=>{let r;const a=e.trim();(r=o.exec(a))?t.has(r[1].toLowerCase())&&(i[r[1]]=!0,n(r[1],"true",i,t)):(r=s.exec(a))&&t.has(r[1].toLowerCase())&&n(r[1],r[2],i,t)})),i}},t.parsePrimitive=r,t.twoslashCompletions=(e,t)=>(t,o,s)=>{const n=[],r=t.getValueInRange({startLineNumber:o.lineNumber,startColumn:0,endLineNumber:o.lineNumber,endColumn:o.column});if(!r.startsWith("//"))return{suggestions:[]};const i=r.replace("\t","").split(" ");if(2!==i.length)return{suggestions:[]};const a=i[1];if(a.startsWith("-"))return{suggestions:[{label:"---cut---",kind:14,detail:"Twoslash split output",insertText:"---cut---".replace(a,"")}]};if(!a.startsWith("@"))return{suggestions:[]};const l=e.optionDeclarations.map((e=>e.name));return["noErrors","errors","showEmit","showEmittedFile","noStaticSemanticInfo","emit","noErrorValidation","filename"].concat(l).forEach((e=>{e.startsWith(a.slice(1))&&n.push({label:e,kind:14,detail:"Twoslash comment",insertText:e})})),{suggestions:n}}}));